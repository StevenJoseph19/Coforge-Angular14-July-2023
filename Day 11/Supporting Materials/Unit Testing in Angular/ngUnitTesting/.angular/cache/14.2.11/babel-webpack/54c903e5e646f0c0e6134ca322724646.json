{"ast":null,"code":"import _inherits from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/**\n * @license Angular v14.3.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n\nvar HttpHandler = /*#__PURE__*/_createClass(function HttpHandler() {\n  _classCallCheck(this, HttpHandler);\n});\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n\n\nvar HttpBackend = /*#__PURE__*/_createClass(function HttpBackend() {\n  _classCallCheck(this, HttpBackend);\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\n\n\nvar HttpHeaders = /*#__PURE__*/function () {\n  /**  Constructs a new HTTP header object with the given values.*/\n  function HttpHeaders(headers) {\n    var _this = this;\n\n    _classCallCheck(this, HttpHeaders);\n\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        headers.split('\\n').forEach(function (line) {\n          var index = line.indexOf(':');\n\n          if (index > 0) {\n            var name = line.slice(0, index);\n            var key = name.toLowerCase();\n            var value = line.slice(index + 1).trim();\n\n            _this.maybeSetNormalizedName(name, key);\n\n            if (_this.headers.has(key)) {\n              _this.headers.get(key).push(value);\n            } else {\n              _this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = function () {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n\n        _this.headers = new Map();\n        Object.keys(headers).forEach(function (name) {\n          var values = headers[name];\n          var key = name.toLowerCase();\n\n          if (typeof values === 'string') {\n            values = [values];\n          }\n\n          if (values.length > 0) {\n            _this.headers.set(key, values);\n\n            _this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n\n\n  _createClass(HttpHeaders, [{\n    key: \"has\",\n    value: function has(name) {\n      this.init();\n      return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      this.init();\n      var values = this.headers.get(name.toLowerCase());\n      return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      this.init();\n      return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'd'\n      });\n    }\n  }, {\n    key: \"maybeSetNormalizedName\",\n    value: function maybeSetNormalizedName(name, lcName) {\n      if (!this.normalizedNames.has(lcName)) {\n        this.normalizedNames.set(lcName, name);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      if (!!this.lazyInit) {\n        if (this.lazyInit instanceof HttpHeaders) {\n          this.copyFrom(this.lazyInit);\n        } else {\n          this.lazyInit();\n        }\n\n        this.lazyInit = null;\n\n        if (!!this.lazyUpdate) {\n          this.lazyUpdate.forEach(function (update) {\n            return _this2.applyUpdate(update);\n          });\n          this.lazyUpdate = null;\n        }\n      }\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      var _this3 = this;\n\n      other.init();\n      Array.from(other.headers.keys()).forEach(function (key) {\n        _this3.headers.set(key, other.headers.get(key));\n\n        _this3.normalizedNames.set(key, other.normalizedNames.get(key));\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpHeaders();\n      clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n      clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n      return clone;\n    }\n  }, {\n    key: \"applyUpdate\",\n    value: function applyUpdate(update) {\n      var key = update.name.toLowerCase();\n\n      switch (update.op) {\n        case 'a':\n        case 's':\n          var value = update.value;\n\n          if (typeof value === 'string') {\n            value = [value];\n          }\n\n          if (value.length === 0) {\n            return;\n          }\n\n          this.maybeSetNormalizedName(update.name, key);\n          var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n          base.push.apply(base, _toConsumableArray(value));\n          this.headers.set(key, base);\n          break;\n\n        case 'd':\n          var toDelete = update.value;\n\n          if (!toDelete) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            var existing = this.headers.get(key);\n\n            if (!existing) {\n              return;\n            }\n\n            existing = existing.filter(function (value) {\n              return toDelete.indexOf(value) === -1;\n            });\n\n            if (existing.length === 0) {\n              this.headers.delete(key);\n              this.normalizedNames.delete(key);\n            } else {\n              this.headers.set(key, existing);\n            }\n          }\n\n          break;\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this4 = this;\n\n      this.init();\n      Array.from(this.normalizedNames.keys()).forEach(function (key) {\n        return fn(_this4.normalizedNames.get(key), _this4.headers.get(key));\n      });\n    }\n  }]);\n\n  return HttpHeaders;\n}();\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\n\n\nfunction assertValidHeaders(headers) {\n  for (var _i = 0, _Object$entries = Object.entries(headers); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n      throw new Error(\"Unexpected value of the `\".concat(key, \"` header provided. \") + \"Expecting either a string or an array, but got: `\".concat(value, \"`.\"));\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\n\n\nvar HttpUrlEncodingCodec = /*#__PURE__*/function () {\n  function HttpUrlEncodingCodec() {\n    _classCallCheck(this, HttpUrlEncodingCodec);\n  }\n\n  _createClass(HttpUrlEncodingCodec, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n\n  }, {\n    key: \"decodeKey\",\n    value: function decodeKey(key) {\n      return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(value) {\n      return decodeURIComponent(value);\n    }\n  }]);\n\n  return HttpUrlEncodingCodec;\n}();\n\nfunction paramParser(rawParams, codec) {\n  var map = new Map();\n\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    var params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(function (param) {\n      var eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\n\n\nvar STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nvar STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, function (s, t) {\n    var _a;\n\n    return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s;\n  });\n}\n\nfunction valueToString(value) {\n  return \"\".concat(value);\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\n\n\nvar HttpParams = /*#__PURE__*/function () {\n  function HttpParams() {\n    var _this5 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpParams);\n\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(\"Cannot specify both fromString and fromObject.\");\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(function (key) {\n        var value = options.fromObject[key]; // convert the values to strings\n\n        var values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n\n        _this5.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n\n\n  _createClass(HttpParams, [{\n    key: \"has\",\n    value: function has(param) {\n      this.init();\n      return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      this.init();\n      var res = this.map.get(param);\n      return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      this.init();\n      return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(params) {\n      var updates = [];\n      Object.keys(params).forEach(function (param) {\n        var value = params[param];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (_value) {\n            updates.push({\n              param: param,\n              value: _value,\n              op: 'a'\n            });\n          });\n        } else {\n          updates.push({\n            param: param,\n            value: value,\n            op: 'a'\n          });\n        }\n      });\n      return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'd'\n      });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this6 = this;\n\n      this.init();\n      return this.keys().map(function (key) {\n        var eKey = _this6.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n        // `b: []` produces `''`\n        // `c: ['1', '2']` produces `'c=1&c=2'`\n\n\n        return _this6.map.get(key).map(function (value) {\n          return eKey + '=' + _this6.encoder.encodeValue(value);\n        }).join('&');\n      }) // filter out empty values because `b: []` produces `''`\n      // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n      .filter(function (param) {\n        return param !== '';\n      }).join('&');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpParams({\n        encoder: this.encoder\n      });\n      clone.cloneFrom = this.cloneFrom || this;\n      clone.updates = (this.updates || []).concat(update);\n      return clone;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this7 = this;\n\n      if (this.map === null) {\n        this.map = new Map();\n      }\n\n      if (this.cloneFrom !== null) {\n        this.cloneFrom.init();\n        this.cloneFrom.keys().forEach(function (key) {\n          return _this7.map.set(key, _this7.cloneFrom.map.get(key));\n        });\n        this.updates.forEach(function (update) {\n          switch (update.op) {\n            case 'a':\n            case 's':\n              var base = (update.op === 'a' ? _this7.map.get(update.param) : undefined) || [];\n              base.push(valueToString(update.value));\n\n              _this7.map.set(update.param, base);\n\n              break;\n\n            case 'd':\n              if (update.value !== undefined) {\n                var _base = _this7.map.get(update.param) || [];\n\n                var idx = _base.indexOf(valueToString(update.value));\n\n                if (idx !== -1) {\n                  _base.splice(idx, 1);\n                }\n\n                if (_base.length > 0) {\n                  _this7.map.set(update.param, _base);\n                } else {\n                  _this7.map.delete(update.param);\n                }\n              } else {\n                _this7.map.delete(update.param);\n\n                break;\n              }\n\n          }\n        });\n        this.cloneFrom = this.updates = null;\n      }\n    }\n  }]);\n\n  return HttpParams;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\n\n\nvar HttpContextToken = /*#__PURE__*/_createClass(function HttpContextToken(defaultValue) {\n  _classCallCheck(this, HttpContextToken);\n\n  this.defaultValue = defaultValue;\n});\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\n\n\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  _createClass(HttpContext, [{\n    key: \"set\",\n    value: function set(token, value) {\n      this.map.set(token, value);\n      return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      if (!this.map.has(token)) {\n        this.map.set(token, token.defaultValue());\n      }\n\n      return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(token) {\n      this.map.delete(token);\n      return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(token) {\n      return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.map.keys();\n    }\n  }]);\n\n  return HttpContext;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\n\n\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\n\n\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(method, url, third, fourth) {\n    _classCallCheck(this, HttpRequest);\n\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    var options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no context have been passed in, construct a new HttpContext instance.\n\n\n    if (!this.context) {\n      this.context = new HttpContext();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      var params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        var qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n\n\n  _createClass(HttpRequest, [{\n    key: \"serializeBody\",\n    value: function serializeBody() {\n      // If no body is present, no need to serialize it.\n      if (this.body === null) {\n        return null;\n      } // Check whether the body is already in a serialized form. If so,\n      // it can just be returned directly.\n\n\n      if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n        return this.body;\n      } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n      if (this.body instanceof HttpParams) {\n        return this.body.toString();\n      } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n        return JSON.stringify(this.body);\n      } // Fall back on toString() for everything else.\n\n\n      return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n\n  }, {\n    key: \"detectContentTypeHeader\",\n    value: function detectContentTypeHeader() {\n      // An empty body has no content type.\n      if (this.body === null) {\n        return null;\n      } // FormData bodies rely on the browser's content type assignment.\n\n\n      if (isFormData(this.body)) {\n        return null;\n      } // Blobs usually have their own content type. If it doesn't, then\n      // no type can be inferred.\n\n\n      if (isBlob(this.body)) {\n        return this.body.type || null;\n      } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n      if (isArrayBuffer(this.body)) {\n        return null;\n      } // Technically, strings could be a form of JSON data, but it's safe enough\n      // to assume they're plain strings.\n\n\n      if (typeof this.body === 'string') {\n        return 'text/plain';\n      } // `HttpUrlEncodedParams` has its own content-type.\n\n\n      if (this.body instanceof HttpParams) {\n        return 'application/x-www-form-urlencoded;charset=UTF-8';\n      } // Arrays, objects, boolean and numbers will be encoded as JSON.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n        return 'application/json';\n      } // No type could be inferred.\n\n\n      return null;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a; // For method, url, and responseType, take the current value unless\n      // it is overridden in the update hash.\n\n\n      var method = update.method || this.method;\n      var url = update.url || this.url;\n      var responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n      // whatever current body is present is being overridden with an empty\n      // body, whereas an `undefined` value in update.body implies no\n      // override.\n\n      var body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n      // `false` and `undefined` in the update args.\n\n      var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n      var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n      // `setParams` are used.\n\n      var headers = update.headers || this.headers;\n      var params = update.params || this.params; // Pass on context if needed\n\n      var context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context; // Check whether the caller has asked to add headers.\n\n      if (update.setHeaders !== undefined) {\n        // Set every requested header.\n        headers = Object.keys(update.setHeaders).reduce(function (headers, name) {\n          return headers.set(name, update.setHeaders[name]);\n        }, headers);\n      } // Check whether the caller has asked to set params.\n\n\n      if (update.setParams) {\n        // Set every requested param.\n        params = Object.keys(update.setParams).reduce(function (params, param) {\n          return params.set(param, update.setParams[param]);\n        }, params);\n      } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n      return new HttpRequest(method, url, body, {\n        params: params,\n        headers: headers,\n        context: context,\n        reportProgress: reportProgress,\n        responseType: responseType,\n        withCredentials: withCredentials\n      });\n    }\n  }]);\n\n  return HttpRequest;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\n\n\nvar HttpEventType;\n\n(function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\n\n\nvar HttpResponseBase = /*#__PURE__*/_createClass(\n/**\n * Super-constructor for all responses.\n *\n * The single parameter accepted is an initialization hash. Any properties\n * of the response passed there will override the default values.\n */\nfunction HttpResponseBase(init) {\n  var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';\n\n  _classCallCheck(this, HttpResponseBase);\n\n  // If the hash has values passed, use them to initialize the response.\n  // Otherwise use the default values.\n  this.headers = init.headers || new HttpHeaders();\n  this.status = init.status !== undefined ? init.status : defaultStatus;\n  this.statusText = init.statusText || defaultStatusText;\n  this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n  this.ok = this.status >= 200 && this.status < 300;\n});\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\n\n\nvar HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {\n  _inherits(HttpHeaderResponse, _HttpResponseBase);\n\n  var _super = _createSuper(HttpHeaderResponse);\n\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  function HttpHeaderResponse() {\n    var _this8;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpHeaderResponse);\n\n    _this8 = _super.call(this, init);\n    _this8.type = HttpEventType.ResponseHeader;\n    return _this8;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n\n\n  _createClass(HttpHeaderResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Perform a straightforward initialization of the new HttpHeaderResponse,\n      // overriding the current parameters with new ones if given.\n      return new HttpHeaderResponse({\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpHeaderResponse;\n}(HttpResponseBase);\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\n\n\nvar HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {\n  _inherits(HttpResponse, _HttpResponseBase2);\n\n  var _super2 = _createSuper(HttpResponse);\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  function HttpResponse() {\n    var _this9;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpResponse);\n\n    _this9 = _super2.call(this, init);\n    _this9.type = HttpEventType.Response;\n    _this9.body = init.body !== undefined ? init.body : null;\n    return _this9;\n  }\n\n  _createClass(HttpResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new HttpResponse({\n        body: update.body !== undefined ? update.body : this.body,\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpResponse;\n}(HttpResponseBase);\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\n\n\nvar HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {\n  _inherits(HttpErrorResponse, _HttpResponseBase3);\n\n  var _super3 = _createSuper(HttpErrorResponse);\n\n  function HttpErrorResponse(init) {\n    var _this10;\n\n    _classCallCheck(this, HttpErrorResponse);\n\n    // Initialize with a default status of 0 / Unknown Error.\n    _this10 = _super3.call(this, init, 0, 'Unknown Error');\n    _this10.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n\n    _this10.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (_this10.status >= 200 && _this10.status < 300) {\n      _this10.message = \"Http failure during parsing for \".concat(init.url || '(unknown url)');\n    } else {\n      _this10.message = \"Http failure response for \".concat(init.url || '(unknown url)', \": \").concat(init.status, \" \").concat(init.statusText);\n    }\n\n    _this10.error = init.error || null;\n    return _this10;\n  }\n\n  return _createClass(HttpErrorResponse);\n}(HttpResponseBase);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body: body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n\n\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient(handler) {\n    _classCallCheck(this, HttpClient);\n\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n\n\n  _createClass(HttpClient, [{\n    key: \"request\",\n    value: function request(first, url) {\n      var _this11 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n      if (first instanceof HttpRequest) {\n        // It is. The other arguments must be undefined (per the signatures) and can be\n        // ignored.\n        req = first;\n      } else {\n        // It's a string, so it represents a URL. Construct a request based on it,\n        // and incorporate the remaining arguments (assuming `GET` unless a method is\n        // provided.\n        // Figure out the headers.\n        var headers = undefined;\n\n        if (options.headers instanceof HttpHeaders) {\n          headers = options.headers;\n        } else {\n          headers = new HttpHeaders(options.headers);\n        } // Sort out parameters.\n\n\n        var params = undefined;\n\n        if (!!options.params) {\n          if (options.params instanceof HttpParams) {\n            params = options.params;\n          } else {\n            params = new HttpParams({\n              fromObject: options.params\n            });\n          }\n        } // Construct the request.\n\n\n        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n          headers: headers,\n          context: options.context,\n          params: params,\n          reportProgress: options.reportProgress,\n          // By default, JSON is assumed to be returned for all calls.\n          responseType: options.responseType || 'json',\n          withCredentials: options.withCredentials\n        });\n      } // Start with an Observable.of() the initial request, and run the handler (which\n      // includes all interceptors) inside a concatMap(). This way, the handler runs\n      // inside an Observable chain, which causes interceptors to be re-run on every\n      // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n      var events$ = of(req).pipe(concatMap(function (req) {\n        return _this11.handler.handle(req);\n      })); // If coming via the API signature which accepts a previously constructed HttpRequest,\n      // the only option is to get the event stream. Otherwise, return the event stream if\n      // that is what was requested.\n\n      if (first instanceof HttpRequest || options.observe === 'events') {\n        return events$;\n      } // The requested stream contains either the full response or the body. In either\n      // case, the first step is to filter the event stream to extract a stream of\n      // responses(s).\n\n\n      var res$ = events$.pipe(filter(function (event) {\n        return event instanceof HttpResponse;\n      })); // Decide which stream to return.\n\n      switch (options.observe || 'body') {\n        case 'body':\n          // The requested stream is the body. Map the response stream to the response\n          // body. This could be done more simply, but a misbehaving interceptor might\n          // transform the response body into a different format and ignore the requested\n          // responseType. Guard against this by validating that the response is of the\n          // requested type.\n          switch (req.responseType) {\n            case 'arraybuffer':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new Error('Response is not an ArrayBuffer.');\n                }\n\n                return res.body;\n              }));\n\n            case 'blob':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new Error('Response is not a Blob.');\n                }\n\n                return res.body;\n              }));\n\n            case 'text':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new Error('Response is not a string.');\n                }\n\n                return res.body;\n              }));\n\n            case 'json':\n            default:\n              // No validation needed for JSON responses, as they can be of any type.\n              return res$.pipe(map(function (res) {\n                return res.body;\n              }));\n          }\n\n        case 'response':\n          // The response stream was requested directly, so return it.\n          return res$;\n\n        default:\n          // Guard against new future observe types being added.\n          throw new Error(\"Unreachable: unhandled observe type \".concat(options.observe, \"}\"));\n      }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"head\",\n    value: function head(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n\n  }, {\n    key: \"jsonp\",\n    value: function jsonp(url, callbackParam) {\n      return this.request('JSONP', url, {\n        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n        observe: 'body',\n        responseType: 'json'\n      });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"options\",\n    value: function options(url) {\n      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return this.request('OPTIONS', url, _options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"patch\",\n    value: function patch(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PUT', url, addBody(options, body));\n    }\n  }]);\n\n  return HttpClient;\n}();\n\nHttpClient.Éµfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(i0.ÉµÉµinject(HttpHandler));\n};\n\nHttpClient.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\n\n\nvar HttpInterceptorHandler = /*#__PURE__*/function () {\n  function HttpInterceptorHandler(next, interceptor) {\n    _classCallCheck(this, HttpInterceptorHandler);\n\n    this.next = next;\n    this.interceptor = interceptor;\n  }\n\n  _createClass(HttpInterceptorHandler, [{\n    key: \"handle\",\n    value: function handle(req) {\n      return this.interceptor.intercept(req, this.next);\n    }\n  }]);\n\n  return HttpInterceptorHandler;\n}();\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\n\n\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n\nvar NoopInterceptor = /*#__PURE__*/function () {\n  function NoopInterceptor() {\n    _classCallCheck(this, NoopInterceptor);\n  }\n\n  _createClass(NoopInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      return next.handle(req);\n    }\n  }]);\n\n  return NoopInterceptor;\n}();\n\nNoopInterceptor.Éµfac = function NoopInterceptor_Factory(t) {\n  return new (t || NoopInterceptor)();\n};\n\nNoopInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: NoopInterceptor,\n  factory: NoopInterceptor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(NoopInterceptor, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nvar nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\n\nvar foreignDocument; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.'; // Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\n\nvar JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\n\nvar JsonpCallbackContext = /*#__PURE__*/_createClass(function JsonpCallbackContext() {\n  _classCallCheck(this, JsonpCallbackContext);\n});\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n\n\nvar JsonpClientBackend = /*#__PURE__*/function () {\n  function JsonpClientBackend(callbackMap, document) {\n    _classCallCheck(this, JsonpClientBackend);\n\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n\n\n  _createClass(JsonpClientBackend, [{\n    key: \"nextCallback\",\n    value: function nextCallback() {\n      return \"ng_jsonp_callback_\".concat(nextRequestId++);\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(req) {\n      var _this12 = this;\n\n      // Firstly, check both the method and response type. If either doesn't match\n      // then the request was improperly routed here and cannot be handled.\n      if (req.method !== 'JSONP') {\n        throw new Error(JSONP_ERR_WRONG_METHOD);\n      } else if (req.responseType !== 'json') {\n        throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n      } // Check the request headers. JSONP doesn't support headers and\n      // cannot set any that were supplied.\n\n\n      if (req.headers.keys().length > 0) {\n        throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n      } // Everything else happens inside the Observable boundary.\n\n\n      return new Observable(function (observer) {\n        // The first step to make a request is to generate the callback name, and replace the\n        // callback placeholder in the URL with the name. Care has to be taken here to ensure\n        // a trailing &, if matched, gets inserted back into the URL in the correct place.\n        var callback = _this12.nextCallback();\n\n        var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\".concat(callback, \"$1\")); // Construct the <script> tag and point it at the URL.\n\n        var node = _this12.document.createElement('script');\n\n        node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n        // are closed over and track state across those callbacks.\n        // The response object, if one has been received, or null otherwise.\n\n        var body = null; // Whether the response callback has been called.\n\n        var finished = false; // Set the response callback in this.callbackMap (which will be the window\n        // object in the browser. The script being loaded via the <script> tag will\n        // eventually call this callback.\n\n        _this12.callbackMap[callback] = function (data) {\n          // Data has been received from the JSONP script. Firstly, delete this callback.\n          delete _this12.callbackMap[callback]; // Set state to indicate data was received.\n\n          body = data;\n          finished = true;\n        }; // cleanup() is a utility closure that removes the <script> from the page and\n        // the response callback from the window. This logic is used in both the\n        // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n        var cleanup = function cleanup() {\n          // Remove the <script> tag if it's still on the page.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          } // Remove the response callback from the callbackMap (window object in the\n          // browser).\n\n\n          delete _this12.callbackMap[callback];\n        }; // onLoad() is the success callback which runs after the response callback\n        // if the JSONP script loads successfully. The event itself is unimportant.\n        // If something went wrong, onLoad() may run without the response callback\n        // having been invoked.\n\n\n        var onLoad = function onLoad(event) {\n          // We wrap it in an extra Promise, to ensure the microtask\n          // is scheduled after the loaded endpoint has executed any potential microtask itself,\n          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n          _this12.resolvedPromise.then(function () {\n            // Cleanup the page.\n            cleanup(); // Check whether the response callback has run.\n\n            if (!finished) {\n              // It hasn't, something went wrong with the request. Return an error via\n              // the Observable error path. All JSONP errors have status 0.\n              observer.error(new HttpErrorResponse({\n                url: url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK)\n              }));\n              return;\n            } // Success. body either contains the response body or null if none was\n            // returned.\n\n\n            observer.next(new HttpResponse({\n              body: body,\n              status: 200\n              /* HttpStatusCode.Ok */\n              ,\n              statusText: 'OK',\n              url: url\n            })); // Complete the stream, the response is over.\n\n            observer.complete();\n          });\n        }; // onError() is the error callback, which runs if the script returned generates\n        // a Javascript error. It emits the error via the Observable error channel as\n        // a HttpErrorResponse.\n\n\n        var onError = function onError(error) {\n          cleanup(); // Wrap the error in a HttpErrorResponse.\n\n          observer.error(new HttpErrorResponse({\n            error: error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url: url\n          }));\n        }; // Subscribe to both the success (load) and error events on the <script> tag,\n        // and add it to the page.\n\n\n        node.addEventListener('load', onLoad);\n        node.addEventListener('error', onError);\n\n        _this12.document.body.appendChild(node); // The request has now been successfully sent.\n\n\n        observer.next({\n          type: HttpEventType.Sent\n        }); // Cancellation handler.\n\n        return function () {\n          if (!finished) {\n            _this12.removeListeners(node);\n          } // And finally, clean up the page.\n\n\n          cleanup();\n        };\n      });\n    }\n  }, {\n    key: \"removeListeners\",\n    value: function removeListeners(script) {\n      // Issue #34818\n      // Changing <script>'s ownerDocument will prevent it from execution.\n      // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n      if (!foreignDocument) {\n        foreignDocument = this.document.implementation.createHTMLDocument();\n      }\n\n      foreignDocument.adoptNode(script);\n    }\n  }]);\n\n  return JsonpClientBackend;\n}();\n\nJsonpClientBackend.Éµfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(i0.ÉµÉµinject(JsonpCallbackContext), i0.ÉµÉµinject(DOCUMENT));\n};\n\nJsonpClientBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n\n\nvar JsonpInterceptor = /*#__PURE__*/function () {\n  function JsonpInterceptor(jsonp) {\n    _classCallCheck(this, JsonpInterceptor);\n\n    this.jsonp = jsonp;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n\n\n  _createClass(JsonpInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      if (req.method === 'JSONP') {\n        return this.jsonp.handle(req);\n      } // Fall through for normal HTTP requests.\n\n\n      return next.handle(req);\n    }\n  }]);\n\n  return JsonpInterceptor;\n}();\n\nJsonpInterceptor.Éµfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(i0.ÉµÉµinject(JsonpClientBackend));\n};\n\nJsonpInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpClientBackend\n    }];\n  }, null);\n})();\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n\n\nvar HttpXhrBackend = /*#__PURE__*/function () {\n  function HttpXhrBackend(xhrFactory) {\n    _classCallCheck(this, HttpXhrBackend);\n\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n\n\n  _createClass(HttpXhrBackend, [{\n    key: \"handle\",\n    value: function handle(req) {\n      var _this13 = this;\n\n      // Quick check to give a better error message when a user attempts to use\n      // HttpClient.jsonp() without installing the HttpClientJsonpModule\n      if (req.method === 'JSONP') {\n        throw new Error(\"Attempted to construct Jsonp request without HttpClientJsonpModule installed.\");\n      } // Everything happens on Observable subscription.\n\n\n      return new Observable(function (observer) {\n        // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n        var xhr = _this13.xhrFactory.build();\n\n        xhr.open(req.method, req.urlWithParams);\n\n        if (!!req.withCredentials) {\n          xhr.withCredentials = true;\n        } // Add all the requested headers.\n\n\n        req.headers.forEach(function (name, values) {\n          return xhr.setRequestHeader(name, values.join(','));\n        }); // Add an Accept header if one isn't present already.\n\n        if (!req.headers.has('Accept')) {\n          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        } // Auto-detect the Content-Type header if one isn't present already.\n\n\n        if (!req.headers.has('Content-Type')) {\n          var detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n          if (detectedType !== null) {\n            xhr.setRequestHeader('Content-Type', detectedType);\n          }\n        } // Set the responseType if one was requested.\n\n\n        if (req.responseType) {\n          var responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n        var reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n\n        var headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n\n        var partialFromXhr = function partialFromXhr() {\n          if (headerResponse !== null) {\n            return headerResponse;\n          }\n\n          var statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n          var headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n\n          var url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n          headerResponse = new HttpHeaderResponse({\n            headers: headers,\n            status: xhr.status,\n            statusText: statusText,\n            url: url\n          });\n          return headerResponse;\n        }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n\n\n        var onLoad = function onLoad() {\n          // Read response state from the memoized partial data.\n          var _partialFromXhr = partialFromXhr(),\n              headers = _partialFromXhr.headers,\n              status = _partialFromXhr.status,\n              statusText = _partialFromXhr.statusText,\n              url = _partialFromXhr.url; // The body will be read out if present.\n\n\n          var body = null;\n\n          if (status !== 204\n          /* HttpStatusCode.NoContent */\n          ) {\n            // Use XMLHttpRequest.response if set, responseText otherwise.\n            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n          } // Normalize another potential bug (this one comes from CORS).\n\n\n          if (status === 0) {\n            status = !!body ? 200\n            /* HttpStatusCode.Ok */\n            : 0;\n          } // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n\n\n          var ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            var originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n              // JSON response. Restore the original body (including any XSSI prefix) to deliver\n              // a better error response.\n              body = originalBody; // If this was an error request to begin with, leave it as a string, it probably\n              // just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false; // The parse error contains the text of the body that failed to parse.\n\n                body = {\n                  error: error,\n                  text: body\n                };\n              }\n            }\n          }\n\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            })); // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            }));\n          }\n        }; // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n\n\n        var onError = function onError(error) {\n          var _partialFromXhr2 = partialFromXhr(),\n              url = _partialFromXhr2.url;\n\n          var res = new HttpErrorResponse({\n            error: error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progress event.\n\n\n        var sentHeaders = false; // The download progress event handler, which is only registered if\n        // progress events are enabled.\n\n        var onDownProgress = function onDownProgress(event) {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          } // Start building the download progress event to deliver on the response\n          // event stream.\n\n\n          var progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          }; // Set the total number of bytes in the event if it's available.\n\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          } // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n\n\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          } // Finally, fire the event.\n\n\n          observer.next(progressEvent);\n        }; // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n\n\n        var onUpProgress = function onUpProgress(event) {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          var progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          }; // If the total number of bytes being uploaded is available, include\n          // it.\n\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          } // Send the event.\n\n\n          observer.next(progress);\n        }; // By default, register for load and error events.\n\n\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.\n\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        } // Fire the request, and notify the event stream that it was fired.\n\n\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        }); // This is the return from the Observable function, which is the\n        // request cancellation handler.\n\n        return function () {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          } // Finally, abort the in-flight request.\n\n\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }\n  }]);\n\n  return HttpXhrBackend;\n}();\n\nHttpXhrBackend.Éµfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(i0.ÉµÉµinject(i1.XhrFactory));\n};\n\nHttpXhrBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.XhrFactory\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n\nvar HttpXsrfTokenExtractor = /*#__PURE__*/_createClass(function HttpXsrfTokenExtractor() {\n  _classCallCheck(this, HttpXsrfTokenExtractor);\n});\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n\n\nvar HttpXsrfCookieExtractor = /*#__PURE__*/function () {\n  function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n    _classCallCheck(this, HttpXsrfCookieExtractor);\n\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * @internal for testing\n     */\n\n    this.parseCount = 0;\n  }\n\n  _createClass(HttpXsrfCookieExtractor, [{\n    key: \"getToken\",\n    value: function getToken() {\n      if (this.platform === 'server') {\n        return null;\n      }\n\n      var cookieString = this.doc.cookie || '';\n\n      if (cookieString !== this.lastCookieString) {\n        this.parseCount++;\n        this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n        this.lastCookieString = cookieString;\n      }\n\n      return this.lastToken;\n    }\n  }]);\n\n  return HttpXsrfCookieExtractor;\n}();\n\nHttpXsrfCookieExtractor.Éµfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(i0.ÉµÉµinject(DOCUMENT), i0.ÉµÉµinject(PLATFORM_ID), i0.ÉµÉµinject(XSRF_COOKIE_NAME));\n};\n\nHttpXsrfCookieExtractor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n\n\nvar HttpXsrfInterceptor = /*#__PURE__*/function () {\n  function HttpXsrfInterceptor(tokenService, headerName) {\n    _classCallCheck(this, HttpXsrfInterceptor);\n\n    this.tokenService = tokenService;\n    this.headerName = headerName;\n  }\n\n  _createClass(HttpXsrfInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n      // Non-mutating requests don't require a token, and absolute URLs require special handling\n      // anyway as the cookie set\n      // on our origin is not the same as the token expected by another origin.\n\n      if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next.handle(req);\n      }\n\n      var token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.\n\n      if (token !== null && !req.headers.has(this.headerName)) {\n        req = req.clone({\n          headers: req.headers.set(this.headerName, token)\n        });\n      }\n\n      return next.handle(req);\n    }\n  }]);\n\n  return HttpXsrfInterceptor;\n}();\n\nHttpXsrfInterceptor.Éµfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(i0.ÉµÉµinject(HttpXsrfTokenExtractor), i0.ÉµÉµinject(XSRF_HEADER_NAME));\n};\n\nHttpXsrfInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpXsrfTokenExtractor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_HEADER_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n\n\nvar HttpInterceptingHandler = /*#__PURE__*/function () {\n  function HttpInterceptingHandler(backend, injector) {\n    _classCallCheck(this, HttpInterceptingHandler);\n\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n  }\n\n  _createClass(HttpInterceptingHandler, [{\n    key: \"handle\",\n    value: function handle(req) {\n      if (this.chain === null) {\n        var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n        this.chain = interceptors.reduceRight(function (next, interceptor) {\n          return new HttpInterceptorHandler(next, interceptor);\n        }, this.backend);\n      }\n\n      return this.chain.handle(req);\n    }\n  }]);\n\n  return HttpInterceptingHandler;\n}();\n\nHttpInterceptingHandler.Éµfac = function HttpInterceptingHandler_Factory(t) {\n  return new (t || HttpInterceptingHandler)(i0.ÉµÉµinject(HttpBackend), i0.ÉµÉµinject(i0.Injector));\n};\n\nHttpInterceptingHandler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpInterceptingHandler,\n  factory: HttpInterceptingHandler.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpInterceptingHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\n\n\nfunction interceptingHandler(backend) {\n  var interceptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!interceptors) {\n    return backend;\n  }\n\n  return interceptors.reduceRight(function (next, interceptor) {\n    return new HttpInterceptorHandler(next, interceptor);\n  }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n\n\nvar HttpClientXsrfModule = /*#__PURE__*/function () {\n  function HttpClientXsrfModule() {\n    _classCallCheck(this, HttpClientXsrfModule);\n  }\n\n  _createClass(HttpClientXsrfModule, null, [{\n    key: \"disable\",\n    value:\n    /**\n     * Disable the default XSRF protection.\n     */\n    function disable() {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [{\n          provide: HttpXsrfInterceptor,\n          useClass: NoopInterceptor\n        }]\n      };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n\n  }, {\n    key: \"withOptions\",\n    value: function withOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [options.cookieName ? {\n          provide: XSRF_COOKIE_NAME,\n          useValue: options.cookieName\n        } : [], options.headerName ? {\n          provide: XSRF_HEADER_NAME,\n          useValue: options.headerName\n        } : []]\n      };\n    }\n  }]);\n\n  return HttpClientXsrfModule;\n}();\n\nHttpClientXsrfModule.Éµfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\n\nHttpClientXsrfModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, {\n    provide: XSRF_COOKIE_NAME,\n    useValue: 'XSRF-TOKEN'\n  }, {\n    provide: XSRF_HEADER_NAME,\n    useValue: 'X-XSRF-TOKEN'\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, {\n        provide: XSRF_COOKIE_NAME,\n        useValue: 'XSRF-TOKEN'\n      }, {\n        provide: XSRF_HEADER_NAME,\n        useValue: 'X-XSRF-TOKEN'\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nvar HttpClientModule = /*#__PURE__*/_createClass(function HttpClientModule() {\n  _classCallCheck(this, HttpClientModule);\n});\n\nHttpClientModule.Éµfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\n\nHttpClientModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientModule,\n  imports: [HttpClientXsrfModule]\n});\nHttpClientModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [HttpClient, {\n    provide: HttpHandler,\n    useClass: HttpInterceptingHandler\n  }, HttpXhrBackend, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }],\n  imports: [HttpClientXsrfModule.withOptions({\n    cookieName: 'XSRF-TOKEN',\n    headerName: 'X-XSRF-TOKEN'\n  })]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Optional configuration for XSRF protection.\n       */\n      imports: [HttpClientXsrfModule.withOptions({\n        cookieName: 'XSRF-TOKEN',\n        headerName: 'X-XSRF-TOKEN'\n      })],\n\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [HttpClient, {\n        provide: HttpHandler,\n        useClass: HttpInterceptingHandler\n      }, HttpXhrBackend, {\n        provide: HttpBackend,\n        useExisting: HttpXhrBackend\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nvar HttpClientJsonpModule = /*#__PURE__*/_createClass(function HttpClientJsonpModule() {\n  _classCallCheck(this, HttpClientJsonpModule);\n});\n\nHttpClientJsonpModule.Éµfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\n\nHttpClientJsonpModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: JsonpInterceptor,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [JsonpClientBackend, {\n        provide: JsonpCallbackContext,\n        useFactory: jsonpCallbackContext\n      }, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: JsonpInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\n\n\nvar XhrFactory = XhrFactory$1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ÉµHttpInterceptingHandler };","map":{"version":3,"names":["i1","DOCUMENT","ÉµparseCookieValue","XhrFactory","XhrFactory$1","i0","Injectable","InjectionToken","Inject","PLATFORM_ID","NgModule","of","Observable","concatMap","filter","map","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","ngDevMode","assertValidHeaders","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","delete","existing","fn","entries","isArray","Error","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","params","replace","param","eqIdx","decodeKey","decodeValue","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","_a","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","_value","eKey","encodeKey","encodeValue","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","toString","qIdx","sep","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","Éµfac","Éµprov","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","observer","callback","nextCallback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","decorators","args","JsonpInterceptor","jsonp","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","Injector","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","Éµmod","Éµinj","useExisting","multi","HttpClientModule","withOptions","imports","HttpClientJsonpModule","useFactory","ÉµHttpInterceptingHandler"],"sources":["F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@angular/common/fesm2015/http.mjs"],"sourcesContent":["/**\n * @license Angular v14.3.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (typeof value !== 'string' && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => { var _a; return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s; });\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        var _a;\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpClient.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClient });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NoopInterceptor, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\nNoopInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NoopInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NoopInterceptor, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpClientBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: JsonpClientBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: JsonpClientBackend }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: JsonpInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpClientBackend }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* HttpStatusCode.NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXhrBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXhrBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [XSRF_COOKIE_NAME]\n                    }] }];\n    } });\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: HttpXsrfTokenExtractor }, { token: XSRF_HEADER_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: HttpXsrfTokenExtractor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [XSRF_HEADER_NAME]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpInterceptingHandler, deps: [{ token: HttpBackend }, { token: i0.Injector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpInterceptingHandler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpInterceptingHandler });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpInterceptingHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.Injector }]; } });\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientXsrfModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientModule, imports: [HttpClientXsrfModule] });\nHttpClientModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientModule, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [HttpClientXsrfModule.withOptions({\n            cookieName: 'XSRF-TOKEN',\n            headerName: 'X-XSRF-TOKEN',\n        })] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Optional configuration for XSRF protection.\n                     */\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientJsonpModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ÉµHttpInterceptingHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}