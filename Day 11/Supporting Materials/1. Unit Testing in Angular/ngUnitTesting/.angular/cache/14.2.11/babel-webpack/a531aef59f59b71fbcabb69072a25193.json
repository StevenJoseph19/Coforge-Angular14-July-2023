{"ast":null,"code":"import _classCallCheck from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nvar httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n\nvar HeroService = /*#__PURE__*/function () {\n  function HeroService(http, messageService) {\n    _classCallCheck(this, HeroService);\n\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /** GET heroes from the server */\n\n\n  _createClass(HeroService, [{\n    key: \"getHeroes\",\n    value: function getHeroes() {\n      var _this = this;\n\n      return this.http.get(this.heroesUrl).pipe(tap(function (heroes) {\n        return _this.log(\"fetched heroes\");\n      }), catchError(this.handleError('getHeroes', [])));\n    }\n    /** GET hero by id. Return `undefined` when id not found */\n\n  }, {\n    key: \"getHeroNo404\",\n    value: function getHeroNo404(id) {\n      var _this2 = this;\n\n      var url = \"\".concat(this.heroesUrl, \"/?id=\").concat(id);\n      return this.http.get(url).pipe(map(function (heroes) {\n        return heroes[0];\n      }), // returns a {0|1} element array\n      tap(function (h) {\n        var outcome = h ? \"fetched\" : \"did not find\";\n\n        _this2.log(\"\".concat(outcome, \" hero id=\").concat(id));\n      }), catchError(this.handleError(\"getHero id=\".concat(id))));\n    }\n    /** GET hero by id. Will 404 if id not found */\n\n  }, {\n    key: \"getHero\",\n    value: function getHero(id) {\n      var _this3 = this;\n\n      var url = \"\".concat(this.heroesUrl, \"/\").concat(id);\n      return this.http.get(url).pipe(tap(function (_) {\n        return _this3.log(\"fetched hero id=\".concat(id));\n      }), catchError(this.handleError(\"getHero id=\".concat(id))));\n    }\n    /* GET heroes whose name contains search term */\n\n  }, {\n    key: \"searchHeroes\",\n    value: function searchHeroes(term) {\n      var _this4 = this;\n\n      if (!term.trim()) {\n        // if not search term, return empty hero array.\n        return of([]);\n      }\n\n      return this.http.get(\"api/heroes/?name=\".concat(term)).pipe(tap(function (_) {\n        return _this4.log(\"found heroes matching \\\"\".concat(term, \"\\\"\"));\n      }), catchError(this.handleError('searchHeroes', [])));\n    } //////// Save methods //////////\n\n    /** POST: add a new hero to the server */\n\n  }, {\n    key: \"addHero\",\n    value: function addHero(hero) {\n      var _this5 = this;\n\n      return this.http.post(this.heroesUrl, hero, httpOptions).pipe(tap(function (hero) {\n        return _this5.log(\"added hero w/ id=\".concat(hero.id));\n      }), catchError(this.handleError('addHero')));\n    }\n    /** DELETE: delete the hero from the server */\n\n  }, {\n    key: \"deleteHero\",\n    value: function deleteHero(hero) {\n      var _this6 = this;\n\n      var id = typeof hero === 'number' ? hero : hero.id;\n      var url = \"\".concat(this.heroesUrl, \"/\").concat(id);\n      return this.http.delete(url, httpOptions).pipe(tap(function (_) {\n        return _this6.log(\"deleted hero id=\".concat(id));\n      }), catchError(this.handleError('deleteHero')));\n    }\n    /** PUT: update the hero on the server */\n\n  }, {\n    key: \"updateHero\",\n    value: function updateHero(hero) {\n      var _this7 = this;\n\n      return this.http.put(this.heroesUrl, hero, httpOptions).pipe(tap(function (_) {\n        return _this7.log(\"updated hero id=\".concat(hero.id));\n      }), catchError(this.handleError('updateHero')));\n    }\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n\n  }, {\n    key: \"handleError\",\n    value: function handleError() {\n      var _this8 = this;\n\n      var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n      var result = arguments.length > 1 ? arguments[1] : undefined;\n      return function (error) {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        _this8.log(\"\".concat(operation, \" failed: \").concat(error.message)); // Let the app keep running by returning an empty result.\n\n\n        return of(result);\n      };\n    }\n    /** Log a HeroService message with the MessageService */\n\n  }, {\n    key: \"log\",\n    value: function log(message) {\n      this.messageService.add('HeroService: ' + message);\n    }\n  }]);\n\n  return HeroService;\n}();\n\nHeroService.ctorParameters = function () {\n  return [{\n    type: HttpClient\n  }, {\n    type: MessageService\n  }];\n};\n\nHeroService = __decorate([Injectable()], HeroService);\nexport { HeroService };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,sBAAxC;AAEA,SAAqBC,EAArB,QAA+B,MAA/B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,gBAArC;AAGA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,IAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIP,WAAJ,CAAgB;IAAE,gBAAgB;EAAlB,CAAhB;AADS,CAApB;;IAKaQ,WAAW;EAItB,qBACUC,IADV,EAEUC,cAFV,EAEwC;IAAA;;IAD9B;IACA;IAJF,iBAAY,YAAZ,CAIgC,CAJL;EAIU;EAE7C;;;EARsB;IAAA;IAAA,OAStB,qBAAS;MAAA;;MACP,OAAO,KAAKD,IAAL,CAAUE,GAAV,CAAsB,KAAKC,SAA3B,EACJC,IADI,CAEHT,GAAG,CAAC,gBAAM;QAAA,OAAI,KAAI,CAACU,GAAL,kBAAJ;MAAA,CAAP,CAFA,EAGHZ,UAAU,CAAC,KAAKa,WAAL,CAAiB,WAAjB,EAA8B,EAA9B,CAAD,CAHP,CAAP;IAKD;IAED;;EAjBsB;IAAA;IAAA,OAkBtB,sBAAmBC,EAAnB,EAA6B;MAAA;;MAC3B,IAAMC,GAAG,aAAM,KAAKL,SAAX,kBAA4BI,EAA5B,CAAT;MACA,OAAO,KAAKP,IAAL,CAAUE,GAAV,CAAsBM,GAAtB,EACJJ,IADI,CAEHV,GAAG,CAAC,gBAAM;QAAA,OAAIe,MAAM,CAAC,CAAD,CAAV;MAAA,CAAP,CAFA,EAEuB;MAC1Bd,GAAG,CAAC,WAAC,EAAG;QACN,IAAMe,OAAO,GAAGC,CAAC,6BAAjB;;QACA,MAAI,CAACN,GAAL,WAAYK,OAAZ,sBAA+BH,EAA/B;MACD,CAHE,CAHA,EAOHd,UAAU,CAAC,KAAKa,WAAL,sBAAqCC,EAArC,EAAD,CAPP,CAAP;IASD;IAED;;EA/BsB;IAAA;IAAA,OAgCtB,iBAAQA,EAAR,EAAkB;MAAA;;MAChB,IAAMC,GAAG,aAAM,KAAKL,SAAX,cAAwBI,EAAxB,CAAT;MACA,OAAO,KAAKP,IAAL,CAAUE,GAAV,CAAoBM,GAApB,EAAyBJ,IAAzB,CACLT,GAAG,CAAC,WAAC;QAAA,OAAI,MAAI,CAACU,GAAL,2BAA4BE,EAA5B,EAAJ;MAAA,CAAF,CADE,EAELd,UAAU,CAAC,KAAKa,WAAL,sBAAqCC,EAArC,EAAD,CAFL,CAAP;IAID;IAED;;EAxCsB;IAAA;IAAA,OAyCtB,sBAAaK,IAAb,EAAyB;MAAA;;MACvB,IAAI,CAACA,IAAI,CAACC,IAAL,EAAL,EAAkB;QAChB;QACA,OAAOrB,EAAE,CAAC,EAAD,CAAT;MACD;;MACD,OAAO,KAAKQ,IAAL,CAAUE,GAAV,4BAA0CU,IAA1C,GAAkDR,IAAlD,CACLT,GAAG,CAAC,WAAC;QAAA,OAAI,MAAI,CAACU,GAAL,mCAAmCO,IAAnC,QAAJ;MAAA,CAAF,CADE,EAELnB,UAAU,CAAC,KAAKa,WAAL,CAAyB,cAAzB,EAAyC,EAAzC,CAAD,CAFL,CAAP;IAID,CAlDqB,CAoDtB;;IAEA;;EAtDsB;IAAA;IAAA,OAuDtB,iBAASQ,IAAT,EAAmB;MAAA;;MACjB,OAAO,KAAKd,IAAL,CAAUe,IAAV,CAAqB,KAAKZ,SAA1B,EAAqCW,IAArC,EAA2CjB,WAA3C,EAAwDO,IAAxD,CACLT,GAAG,CAAC,UAACmB,IAAD;QAAA,OAAgB,MAAI,CAACT,GAAL,4BAA6BS,IAAI,CAACP,EAAlC,EAAhB;MAAA,CAAD,CADE,EAELd,UAAU,CAAC,KAAKa,WAAL,CAAuB,SAAvB,CAAD,CAFL,CAAP;IAID;IAED;;EA9DsB;IAAA;IAAA,OA+DtB,oBAAYQ,IAAZ,EAA+B;MAAA;;MAC7B,IAAMP,EAAE,GAAG,OAAOO,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACP,EAAlD;MACA,IAAMC,GAAG,aAAM,KAAKL,SAAX,cAAwBI,EAAxB,CAAT;MAEA,OAAO,KAAKP,IAAL,CAAUgB,MAAV,CAAuBR,GAAvB,EAA4BX,WAA5B,EAAyCO,IAAzC,CACLT,GAAG,CAAC,WAAC;QAAA,OAAI,MAAI,CAACU,GAAL,2BAA4BE,EAA5B,EAAJ;MAAA,CAAF,CADE,EAELd,UAAU,CAAC,KAAKa,WAAL,CAAuB,YAAvB,CAAD,CAFL,CAAP;IAID;IAED;;EAzEsB;IAAA;IAAA,OA0EtB,oBAAYQ,IAAZ,EAAsB;MAAA;;MACpB,OAAO,KAAKd,IAAL,CAAUiB,GAAV,CAAc,KAAKd,SAAnB,EAA8BW,IAA9B,EAAoCjB,WAApC,EAAiDO,IAAjD,CACLT,GAAG,CAAC,WAAC;QAAA,OAAI,MAAI,CAACU,GAAL,2BAA4BS,IAAI,CAACP,EAAjC,EAAJ;MAAA,CAAF,CADE,EAELd,UAAU,CAAC,KAAKa,WAAL,CAAsB,YAAtB,CAAD,CAFL,CAAP;IAID;IAED;;;;;;;EAjFsB;IAAA;IAAA,OAuFd,uBAAmD;MAAA;;MAAA,IAAnCY,SAAmC,uEAAvB,WAAuB;MAAA,IAAVC,MAAU;MACzD,OAAO,UAACC,KAAD,EAA8B;QAEnC;QACAC,OAAO,CAACD,KAAR,CAAcA,KAAd,EAHmC,CAGb;QAEtB;;QACA,MAAI,CAACf,GAAL,WAAYa,SAAZ,sBAAiCE,KAAK,CAACE,OAAvC,GANmC,CAQnC;;;QACA,OAAO9B,EAAE,CAAC2B,MAAD,CAAT;MACD,CAVD;IAWD;IAED;;EArGsB;IAAA;IAAA,OAsGd,aAAIG,OAAJ,EAAmB;MACzB,KAAKrB,cAAL,CAAoBsB,GAApB,CAAwB,kBAAkBD,OAA1C;IACD;EAxGqB;;EAAA;AAAA;;;;;;;;;;AAAXvB,WAAW,eADvBV,UAAU,EACa,GAAXU,WAAW,CAAX;SAAAA","names":["Injectable","HttpClient","HttpHeaders","of","catchError","map","tap","MessageService","httpOptions","headers","HeroService","http","messageService","get","heroesUrl","pipe","log","handleError","id","url","heroes","outcome","h","term","trim","hero","post","delete","put","operation","result","error","console","message","add"],"sourceRoot":"","sources":["F:\\Test\\Unit Testing in Angular\\NGUNITESTING\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Hero } from './hero';\r\nimport { MessageService } from './message.service';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable()\r\nexport class HeroService {\r\n\r\n  private heroesUrl = 'api/heroes';  // URL to web api\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private messageService: MessageService) { }\r\n\r\n  /** GET heroes from the server */\r\n  getHeroes (): Observable<Hero[]> {\r\n    return this.http.get<Hero[]>(this.heroesUrl)\r\n      .pipe(\r\n        tap(heroes => this.log(`fetched heroes`)),\r\n        catchError(this.handleError('getHeroes', []))\r\n      );\r\n  }\r\n\r\n  /** GET hero by id. Return `undefined` when id not found */\r\n  getHeroNo404<Data>(id: number): Observable<Hero> {\r\n    const url = `${this.heroesUrl}/?id=${id}`;\r\n    return this.http.get<Hero[]>(url)\r\n      .pipe(\r\n        map(heroes => heroes[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? `fetched` : `did not find`;\r\n          this.log(`${outcome} hero id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Hero>(`getHero id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET hero by id. Will 404 if id not found */\r\n  getHero(id: number): Observable<Hero> {\r\n    const url = `${this.heroesUrl}/${id}`;\r\n    return this.http.get<Hero>(url).pipe(\r\n      tap(_ => this.log(`fetched hero id=${id}`)),\r\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET heroes whose name contains search term */\r\n  searchHeroes(term: string): Observable<Hero[]> {\r\n    if (!term.trim()) {\r\n      // if not search term, return empty hero array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Hero[]>(`api/heroes/?name=${term}`).pipe(\r\n      tap(_ => this.log(`found heroes matching \"${term}\"`)),\r\n      catchError(this.handleError<Hero[]>('searchHeroes', []))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new hero to the server */\r\n  addHero (hero: Hero): Observable<Hero> {\r\n    return this.http.post<Hero>(this.heroesUrl, hero, httpOptions).pipe(\r\n      tap((hero: Hero) => this.log(`added hero w/ id=${hero.id}`)),\r\n      catchError(this.handleError<Hero>('addHero'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the hero from the server */\r\n  deleteHero (hero: Hero | number): Observable<Hero> {\r\n    const id = typeof hero === 'number' ? hero : hero.id;\r\n    const url = `${this.heroesUrl}/${id}`;\r\n\r\n    return this.http.delete<Hero>(url, httpOptions).pipe(\r\n      tap(_ => this.log(`deleted hero id=${id}`)),\r\n      catchError(this.handleError<Hero>('deleteHero'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the hero on the server */\r\n  updateHero (hero: Hero): Observable<any> {\r\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\r\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\r\n      catchError(this.handleError<any>('updateHero'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T> (operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a HeroService message with the MessageService */\r\n  private log(message: string) {\r\n    this.messageService.add('HeroService: ' + message);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}