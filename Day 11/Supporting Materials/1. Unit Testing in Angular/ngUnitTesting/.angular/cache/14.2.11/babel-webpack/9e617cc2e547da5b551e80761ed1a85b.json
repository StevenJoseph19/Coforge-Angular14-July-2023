{"ast":null,"code":"import { Observable, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\n\nvar BackendService =\n/** @class */\nfunction () {\n  function BackendService(inMemDbService, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.inMemDbService = inMemDbService;\n    this.config = new InMemoryBackendConfig();\n    this.requestInfoUtils = this.getRequestInfoUtils();\n    var loc = this.getLocation('/');\n    this.config.host = loc.host; // default to app web server host\n\n    this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n\n    Object.assign(this.config, config);\n  }\n\n  Object.defineProperty(BackendService.prototype, \"dbReady\", {\n    ////  protected /////\n    get: function get() {\n      if (!this.dbReadySubject) {\n        // first time the service is called.\n        this.dbReadySubject = new BehaviorSubject(false);\n        this.resetDb();\n      }\n\n      return this.dbReadySubject.asObservable().pipe(first(function (r) {\n        return r;\n      }));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Process Request and return an Observable of Http Response object\n   * in the manner of a RESTy web api.\n   *\n   * Expect URI pattern in the form :base/:collectionName/:id?\n   * Examples:\n   *   // for store with a 'customers' collection\n   *   GET api/customers          // all customers\n   *   GET api/customers/42       // the character with id=42\n   *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n   *   GET api/customers.json/42  // ignores the \".json\"\n   *\n   * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n   * Examples:\n   *     POST commands/resetDb,\n   *     GET/POST commands/config - get or (re)set the config\n   *\n   *   HTTP overrides:\n   *     If the injected inMemDbService defines an HTTP method (lowercase)\n   *     The request is forwarded to that method as in\n   *     `inMemDbService.get(requestInfo)`\n   *     which must return either an Observable of the response type\n   *     for this http library or null|undefined (which means \"keep processing\").\n   */\n\n  BackendService.prototype.handleRequest = function (req) {\n    var _this = this; //  handle the request when there is an in-memory database\n\n\n    return this.dbReady.pipe(concatMap(function () {\n      return _this.handleRequest_(req);\n    }));\n  };\n\n  BackendService.prototype.handleRequest_ = function (req) {\n    var _this = this;\n\n    var url = req.urlWithParams ? req.urlWithParams : req.url; // Try override parser\n    // If no override parser or it returns nothing, use default parser\n\n    var parser = this.bind('parseRequestUrl');\n    var parsed = parser && parser(url, this.requestInfoUtils) || this.parseRequestUrl(url);\n    var collectionName = parsed.collectionName;\n    var collection = this.db[collectionName];\n    var reqInfo = {\n      req: req,\n      apiBase: parsed.apiBase,\n      collection: collection,\n      collectionName: collectionName,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      id: this.parseId(collection, collectionName, parsed.id),\n      method: this.getRequestMethod(req),\n      query: parsed.query,\n      resourceUrl: parsed.resourceUrl,\n      url: url,\n      utils: this.requestInfoUtils\n    };\n    var resOptions;\n\n    if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n      return this.commands(reqInfo);\n    }\n\n    var methodInterceptor = this.bind(reqInfo.method);\n\n    if (methodInterceptor) {\n      // InMemoryDbService intercepts this HTTP method.\n      // if interceptor produced a response, return it.\n      // else InMemoryDbService chose not to intercept; continue processing.\n      var interceptorResponse = methodInterceptor(reqInfo);\n\n      if (interceptorResponse) {\n        return interceptorResponse;\n      }\n\n      ;\n    }\n\n    if (this.db[collectionName]) {\n      // request is for a known collection of the InMemoryDbService\n      return this.createResponse$(function () {\n        return _this.collectionHandler(reqInfo);\n      });\n    }\n\n    if (this.config.passThruUnknownUrl) {\n      // unknown collection; pass request thru to a \"real\" backend.\n      return this.getPassThruBackend().handle(req);\n    } // 404 - can't handle this request\n\n\n    resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\n    return this.createResponse$(function () {\n      return resOptions;\n    });\n  };\n  /**\n   * Add configured delay to response observable unless delay === 0\n   */\n\n\n  BackendService.prototype.addDelay = function (response) {\n    var d = this.config.delay;\n    return d === 0 ? response : delayResponse(response, d || 500);\n  };\n  /**\n   * Apply query/search parameters as a filter over the collection\n   * This impl only supports RegExp queries on string properties of the collection\n   * ANDs the conditions together\n   */\n\n\n  BackendService.prototype.applyQuery = function (collection, query) {\n    // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n    var conditions = [];\n    var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n    query.forEach(function (value, name) {\n      value.forEach(function (v) {\n        return conditions.push({\n          name: name,\n          rx: new RegExp(decodeURI(v), caseSensitive)\n        });\n      });\n    });\n    var len = conditions.length;\n\n    if (!len) {\n      return collection;\n    } // AND the RegExp conditions\n\n\n    return collection.filter(function (row) {\n      var ok = true;\n      var i = len;\n\n      while (ok && i) {\n        i -= 1;\n        var cond = conditions[i];\n        ok = cond.rx.test(row[cond.name]);\n      }\n\n      return ok;\n    });\n  };\n  /**\n   * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n   */\n\n\n  BackendService.prototype.bind = function (methodName) {\n    var fn = this.inMemDbService[methodName];\n    return fn ? fn.bind(this.inMemDbService) : undefined;\n  };\n\n  BackendService.prototype.bodify = function (data) {\n    return this.config.dataEncapsulation ? {\n      data: data\n    } : data;\n  };\n\n  BackendService.prototype.clone = function (data) {\n    return JSON.parse(JSON.stringify(data));\n  };\n\n  BackendService.prototype.collectionHandler = function (reqInfo) {\n    // const req = reqInfo.req;\n    var resOptions;\n\n    switch (reqInfo.method) {\n      case 'get':\n        resOptions = this.get(reqInfo);\n        break;\n\n      case 'post':\n        resOptions = this.post(reqInfo);\n        break;\n\n      case 'put':\n        resOptions = this.put(reqInfo);\n        break;\n\n      case 'delete':\n        resOptions = this.delete(reqInfo);\n        break;\n\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n        break;\n    } // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n\n\n    var interceptor = this.bind('responseInterceptor');\n    return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n  };\n  /**\n   * Commands reconfigure the in-memory web api service or extract information from it.\n   * Commands ignore the latency delay and respond ASAP.\n   *\n   * When the last segment of the `apiBase` path is \"commands\",\n   * the `collectionName` is the command.\n   *\n   * Example URLs:\n   *   commands/resetdb (POST) // Reset the \"database\" to its original state\n   *   commands/config (GET)   // Return this service's config object\n   *   commands/config (POST)  // Update the config (e.g. the delay)\n   *\n   * Usage:\n   *   http.post('commands/resetdb', undefined);\n   *   http.get('commands/config');\n   *   http.post('commands/config', '{\"delay\":1000}');\n   */\n\n\n  BackendService.prototype.commands = function (reqInfo) {\n    var _this = this;\n\n    var command = reqInfo.collectionName.toLowerCase();\n    var method = reqInfo.method;\n    var resOptions = {\n      url: reqInfo.url\n    };\n\n    switch (command) {\n      case 'resetdb':\n        resOptions.status = STATUS.NO_CONTENT;\n        return this.resetDb(reqInfo).pipe(concatMap(function () {\n          return _this.createResponse$(function () {\n            return resOptions;\n          }, false\n          /* no latency delay */\n          );\n        }));\n\n      case 'config':\n        if (method === 'get') {\n          resOptions.status = STATUS.OK;\n          resOptions.body = this.clone(this.config); // any other HTTP method is assumed to be a config update\n        } else {\n          var body = this.getJsonBody(reqInfo.req);\n          Object.assign(this.config, body);\n          this.passThruBackend = undefined; // re-create when needed\n\n          resOptions.status = STATUS.NO_CONTENT;\n        }\n\n        break;\n\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\n    }\n\n    return this.createResponse$(function () {\n      return resOptions;\n    }, false\n    /* no latency delay */\n    );\n  };\n\n  BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\n    return {\n      body: {\n        error: \"\" + message\n      },\n      url: url,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      status: status\n    };\n  };\n  /**\n   * Create a cold response Observable from a factory for ResponseOptions\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n   * @param withDelay - if true (default), add simulated latency delay from configuration\n   */\n\n\n  BackendService.prototype.createResponse$ = function (resOptionsFactory, withDelay) {\n    if (withDelay === void 0) {\n      withDelay = true;\n    }\n\n    var resOptions$ = this.createResponseOptions$(resOptionsFactory);\n    var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n    return withDelay ? this.addDelay(resp$) : resp$;\n  };\n  /**\n   * Create a cold Observable of ResponseOptions.\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n   */\n\n\n  BackendService.prototype.createResponseOptions$ = function (resOptionsFactory) {\n    var _this = this;\n\n    return new Observable(function (responseObserver) {\n      var resOptions;\n\n      try {\n        resOptions = resOptionsFactory();\n      } catch (error) {\n        var err = error.message || error;\n        resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n      }\n\n      var status = resOptions.status;\n\n      try {\n        resOptions.statusText = getStatusText(status);\n      } catch (e) {\n        /* ignore failure */\n      }\n\n      if (isSuccess(status)) {\n        responseObserver.next(resOptions);\n        responseObserver.complete();\n      } else {\n        responseObserver.error(resOptions);\n      }\n\n      return function () {}; // unsubscribe function\n    });\n  };\n\n  BackendService.prototype.delete = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        url = _a.url; // tslint:disable-next-line:triple-equals\n\n    if (id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\n    }\n\n    var exists = this.removeById(collection, id);\n    return {\n      headers: headers,\n      status: exists || !this.config.delete404 ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n    };\n  };\n  /**\n   * Find first instance of item in collection by `item.id`\n   * @param collection\n   * @param id\n   */\n\n\n  BackendService.prototype.findById = function (collection, id) {\n    return collection.find(function (item) {\n      return item.id === id;\n    });\n  };\n  /**\n   * Generate the next available id for item in this collection\n   * Use method from `inMemDbService` if it exists and returns a value,\n   * else delegates to `genIdDefault`.\n   * @param collection - collection of items with `id` key property\n   */\n\n\n  BackendService.prototype.genId = function (collection, collectionName) {\n    var genId = this.bind('genId');\n\n    if (genId) {\n      var id = genId(collection, collectionName); // tslint:disable-next-line:triple-equals\n\n      if (id != undefined) {\n        return id;\n      }\n    }\n\n    return this.genIdDefault(collection, collectionName);\n  };\n  /**\n   * Default generator of the next available id for item in this collection\n   * This default implementation works only for numeric ids.\n   * @param collection - collection of items with `id` key property\n   * @param collectionName - name of the collection\n   */\n\n\n  BackendService.prototype.genIdDefault = function (collection, collectionName) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\n    }\n\n    var maxId = 0;\n    collection.reduce(function (prev, item) {\n      maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n    }, undefined);\n    return maxId + 1;\n  };\n\n  BackendService.prototype.get = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        query = _a.query,\n        url = _a.url;\n    var data = collection; // tslint:disable-next-line:triple-equals\n\n    if (id != undefined && id !== '') {\n      data = this.findById(collection, id);\n    } else if (query) {\n      data = this.applyQuery(collection, query);\n    }\n\n    if (!data) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\n    }\n\n    return {\n      body: this.bodify(this.clone(data)),\n      headers: headers,\n      status: STATUS.OK\n    };\n  };\n  /**\n   * Get location info from a url, even on server where `document` is not defined\n   */\n\n\n  BackendService.prototype.getLocation = function (url) {\n    if (!url.startsWith('http')) {\n      // get the document iff running in browser\n      var doc = typeof document === 'undefined' ? undefined : document; // add host info to url before parsing.  Use a fake host when not in browser.\n\n      var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n      url = url.startsWith('/') ? base + url : base + '/' + url;\n    }\n\n    return parseUri(url);\n  };\n\n  ;\n  /**\n   * get or create the function that passes unhandled requests\n   * through to the \"real\" backend.\n   */\n\n  BackendService.prototype.getPassThruBackend = function () {\n    return this.passThruBackend ? this.passThruBackend : this.passThruBackend = this.createPassThruBackend();\n  };\n  /**\n   * Get utility methods from this service instance.\n   * Useful within an HTTP method override\n   */\n\n\n  BackendService.prototype.getRequestInfoUtils = function () {\n    var _this = this;\n\n    return {\n      createResponse$: this.createResponse$.bind(this),\n      findById: this.findById.bind(this),\n      isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n      getConfig: function getConfig() {\n        return _this.config;\n      },\n      getDb: function getDb() {\n        return _this.db;\n      },\n      getJsonBody: this.getJsonBody.bind(this),\n      getLocation: this.getLocation.bind(this),\n      getPassThruBackend: this.getPassThruBackend.bind(this),\n      parseRequestUrl: this.parseRequestUrl.bind(this)\n    };\n  };\n\n  BackendService.prototype.indexOf = function (collection, id) {\n    return collection.findIndex(function (item) {\n      return item.id === id;\n    });\n  };\n  /** Parse the id as a number. Return original value if not a number. */\n\n\n  BackendService.prototype.parseId = function (collection, collectionName, id) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      // Can't confirm that `id` is a numeric type; don't parse as a number\n      // or else `'42'` -> `42` and _get by id_ fails.\n      return id;\n    }\n\n    var idNum = parseFloat(id);\n    return isNaN(idNum) ? id : idNum;\n  };\n  /**\n   * return true if can determine that the collection's `item.id` is a number\n   * This implementation can't tell if the collection is empty so it assumes NO\n   * */\n\n\n  BackendService.prototype.isCollectionIdNumeric = function (collection, collectionName) {\n    // collectionName not used now but override might maintain collection type information\n    // so that it could know the type of the `id` even when the collection is empty.\n    return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n  };\n  /**\n   * Parses the request URL into a `ParsedRequestUrl` object.\n   * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n   *\n   * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n   *   When apiBase=undefined and url='http://localhost/api/collection/42'\n   *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n   *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n   *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n   *   When apiBase='/' and url='http://localhost/collection'\n   *     {base: '/', collectionName: 'collection', id: undefined, ...}\n   *\n   * The actual api base segment values are ignored. Only the number of segments matters.\n   * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n   *\n   * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n   */\n\n\n  BackendService.prototype.parseRequestUrl = function (url) {\n    try {\n      var loc = this.getLocation(url);\n      var drop = this.config.rootPath.length;\n      var urlRoot = '';\n\n      if (loc.host !== this.config.host) {\n        // url for a server on a different host!\n        // assume it's collection is actually here too.\n        drop = 1; // the leading slash\n\n        urlRoot = loc.protocol + '//' + loc.host + '/';\n      }\n\n      var path = loc.path.substring(drop);\n      var pathSegments = path.split('/');\n      var segmentIx = 0; // apiBase: the front part of the path devoted to getting to the api route\n      // Assumes first path segment if no config.apiBase\n      // else ignores as many path segments as are in config.apiBase\n      // Does NOT care what the api base chars actually are.\n\n      var apiBase = void 0; // tslint:disable-next-line:triple-equals\n\n      if (this.config.apiBase == undefined) {\n        apiBase = pathSegments[segmentIx++];\n      } else {\n        apiBase = removeTrailingSlash(this.config.apiBase.trim());\n\n        if (apiBase) {\n          segmentIx = apiBase.split('/').length;\n        } else {\n          segmentIx = 0; // no api base at all; unwise but allowed.\n        }\n      }\n\n      apiBase += '/';\n      var collectionName = pathSegments[segmentIx++]; // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n\n      collectionName = collectionName && collectionName.split('.')[0];\n      var id = pathSegments[segmentIx++];\n      var query = this.createQueryMap(loc.query);\n      var resourceUrl = urlRoot + apiBase + collectionName + '/';\n      return {\n        apiBase: apiBase,\n        collectionName: collectionName,\n        id: id,\n        query: query,\n        resourceUrl: resourceUrl\n      };\n    } catch (err) {\n      var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\n      throw new Error(msg);\n    }\n  }; // Create entity\n  // Can update an existing entity too if post409 is false.\n\n\n  BackendService.prototype.post = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        req = _a.req,\n        resourceUrl = _a.resourceUrl,\n        url = _a.url;\n    var item = this.clone(this.getJsonBody(req)); // tslint:disable-next-line:triple-equals\n\n    if (item.id == undefined) {\n      try {\n        item.id = id || this.genId(collection, collectionName);\n      } catch (err) {\n        var emsg = err.message || '';\n\n        if (/id type is non-numeric/.test(emsg)) {\n          return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n        } else {\n          console.error(err);\n          return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\n        }\n      }\n    }\n\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n\n    if (existingIx === -1) {\n      collection.push(item);\n      headers.set('Location', resourceUrl + '/' + id);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    } else if (this.config.post409) {\n      return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\n    } else {\n      collection[existingIx] = item;\n      return this.config.post204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } : // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    }\n  }; // Update existing entity\n  // Can create an entity too if put404 is false.\n\n\n  BackendService.prototype.put = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        req = _a.req,\n        url = _a.url;\n    var item = this.clone(this.getJsonBody(req)); // tslint:disable-next-line:triple-equals\n\n    if (item.id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\n    }\n\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return this.config.put204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } : // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    } else if (this.config.put404) {\n      // item to update not found; use POST to create new item for this id.\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\n    } else {\n      // create new item for id not found\n      collection.push(item);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    }\n  };\n\n  BackendService.prototype.removeById = function (collection, id) {\n    var ix = this.indexOf(collection, id);\n\n    if (ix > -1) {\n      collection.splice(ix, 1);\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Tell your in-mem \"database\" to reset.\n   * returns Observable of the database because resetting it could be async\n   */\n\n\n  BackendService.prototype.resetDb = function (reqInfo) {\n    var _this = this;\n\n    this.dbReadySubject.next(false);\n    var db = this.inMemDbService.createDb(reqInfo);\n    var db$ = db instanceof Observable ? db : typeof db.then === 'function' ? from(db) : of(db);\n    db$.pipe(first()).subscribe(function (d) {\n      _this.db = d;\n\n      _this.dbReadySubject.next(true);\n    });\n    return this.dbReady;\n  };\n\n  return BackendService;\n}();\n\nexport { BackendService };","map":{"version":3,"names":["Observable","BehaviorSubject","of","from","concatMap","first","getStatusText","isSuccess","STATUS","delayResponse","InMemoryBackendConfig","parseUri","removeTrailingSlash","BackendService","inMemDbService","config","requestInfoUtils","getRequestInfoUtils","loc","getLocation","host","rootPath","path","Object","assign","defineProperty","prototype","get","dbReadySubject","resetDb","asObservable","pipe","r","enumerable","configurable","handleRequest","req","_this","dbReady","handleRequest_","url","urlWithParams","parser","bind","parsed","parseRequestUrl","collectionName","collection","db","reqInfo","apiBase","headers","createHeaders","id","parseId","method","getRequestMethod","query","resourceUrl","utils","resOptions","test","commands","methodInterceptor","interceptorResponse","createResponse$","collectionHandler","passThruUnknownUrl","getPassThruBackend","handle","createErrorResponseOptions","NOT_FOUND","addDelay","response","d","delay","applyQuery","conditions","caseSensitive","caseSensitiveSearch","undefined","forEach","value","name","v","push","rx","RegExp","decodeURI","len","length","filter","row","ok","i","cond","methodName","fn","bodify","data","dataEncapsulation","clone","JSON","parse","stringify","post","put","delete","METHOD_NOT_ALLOWED","interceptor","command","toLowerCase","status","NO_CONTENT","OK","body","getJsonBody","passThruBackend","INTERNAL_SERVER_ERROR","message","error","resOptionsFactory","withDelay","resOptions$","createResponseOptions$","resp$","createResponse$fromResponseOptions$","responseObserver","err","statusText","e","next","complete","_a","exists","removeById","delete404","findById","find","item","genId","genIdDefault","isCollectionIdNumeric","Error","maxId","reduce","prev","Math","max","startsWith","doc","document","base","location","protocol","createPassThruBackend","getConfig","getDb","indexOf","findIndex","idNum","parseFloat","isNaN","drop","urlRoot","substring","pathSegments","split","segmentIx","trim","createQueryMap","msg","emsg","UNPROCESSABLE_ENTRY","console","BAD_REQUEST","existingIx","set","CREATED","post409","CONFLICT","post204","put204","put404","ix","splice","createDb","db$","then","subscribe"],"sources":["F:/Test/Unit Testing in Angular/NGUNITESTING/node_modules/angular-in-memory-web-api/__ivy_ngcc__/backend.service.js"],"sourcesContent":["import { Observable, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nvar BackendService = /** @class */ (function () {\n    function BackendService(inMemDbService, config) {\n        if (config === void 0) { config = {}; }\n        this.inMemDbService = inMemDbService;\n        this.config = new InMemoryBackendConfig();\n        this.requestInfoUtils = this.getRequestInfoUtils();\n        var loc = this.getLocation('/');\n        this.config.host = loc.host; // default to app web server host\n        this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n        Object.assign(this.config, config);\n    }\n    Object.defineProperty(BackendService.prototype, \"dbReady\", {\n        ////  protected /////\n        get: function () {\n            if (!this.dbReadySubject) {\n                // first time the service is called.\n                this.dbReadySubject = new BehaviorSubject(false);\n                this.resetDb();\n            }\n            return this.dbReadySubject.asObservable().pipe(first(function (r) { return r; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Process Request and return an Observable of Http Response object\n     * in the manner of a RESTy web api.\n     *\n     * Expect URI pattern in the form :base/:collectionName/:id?\n     * Examples:\n     *   // for store with a 'customers' collection\n     *   GET api/customers          // all customers\n     *   GET api/customers/42       // the character with id=42\n     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n     *   GET api/customers.json/42  // ignores the \".json\"\n     *\n     * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n     * Examples:\n     *     POST commands/resetDb,\n     *     GET/POST commands/config - get or (re)set the config\n     *\n     *   HTTP overrides:\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\n     *     The request is forwarded to that method as in\n     *     `inMemDbService.get(requestInfo)`\n     *     which must return either an Observable of the response type\n     *     for this http library or null|undefined (which means \"keep processing\").\n     */\n    BackendService.prototype.handleRequest = function (req) {\n        var _this = this;\n        //  handle the request when there is an in-memory database\n        return this.dbReady.pipe(concatMap(function () { return _this.handleRequest_(req); }));\n    };\n    BackendService.prototype.handleRequest_ = function (req) {\n        var _this = this;\n        var url = req.urlWithParams ? req.urlWithParams : req.url;\n        // Try override parser\n        // If no override parser or it returns nothing, use default parser\n        var parser = this.bind('parseRequestUrl');\n        var parsed = (parser && parser(url, this.requestInfoUtils)) ||\n            this.parseRequestUrl(url);\n        var collectionName = parsed.collectionName;\n        var collection = this.db[collectionName];\n        var reqInfo = {\n            req: req,\n            apiBase: parsed.apiBase,\n            collection: collection,\n            collectionName: collectionName,\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n            id: this.parseId(collection, collectionName, parsed.id),\n            method: this.getRequestMethod(req),\n            query: parsed.query,\n            resourceUrl: parsed.resourceUrl,\n            url: url,\n            utils: this.requestInfoUtils\n        };\n        var resOptions;\n        if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n            return this.commands(reqInfo);\n        }\n        var methodInterceptor = this.bind(reqInfo.method);\n        if (methodInterceptor) {\n            // InMemoryDbService intercepts this HTTP method.\n            // if interceptor produced a response, return it.\n            // else InMemoryDbService chose not to intercept; continue processing.\n            var interceptorResponse = methodInterceptor(reqInfo);\n            if (interceptorResponse) {\n                return interceptorResponse;\n            }\n            ;\n        }\n        if (this.db[collectionName]) {\n            // request is for a known collection of the InMemoryDbService\n            return this.createResponse$(function () { return _this.collectionHandler(reqInfo); });\n        }\n        if (this.config.passThruUnknownUrl) {\n            // unknown collection; pass request thru to a \"real\" backend.\n            return this.getPassThruBackend().handle(req);\n        }\n        // 404 - can't handle this request\n        resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\n        return this.createResponse$(function () { return resOptions; });\n    };\n    /**\n     * Add configured delay to response observable unless delay === 0\n     */\n    BackendService.prototype.addDelay = function (response) {\n        var d = this.config.delay;\n        return d === 0 ? response : delayResponse(response, d || 500);\n    };\n    /**\n     * Apply query/search parameters as a filter over the collection\n     * This impl only supports RegExp queries on string properties of the collection\n     * ANDs the conditions together\n     */\n    BackendService.prototype.applyQuery = function (collection, query) {\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n        var conditions = [];\n        var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n        query.forEach(function (value, name) {\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), caseSensitive) }); });\n        });\n        var len = conditions.length;\n        if (!len) {\n            return collection;\n        }\n        // AND the RegExp conditions\n        return collection.filter(function (row) {\n            var ok = true;\n            var i = len;\n            while (ok && i) {\n                i -= 1;\n                var cond = conditions[i];\n                ok = cond.rx.test(row[cond.name]);\n            }\n            return ok;\n        });\n    };\n    /**\n     * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n     */\n    BackendService.prototype.bind = function (methodName) {\n        var fn = this.inMemDbService[methodName];\n        return fn ? fn.bind(this.inMemDbService) : undefined;\n    };\n    BackendService.prototype.bodify = function (data) {\n        return this.config.dataEncapsulation ? { data: data } : data;\n    };\n    BackendService.prototype.clone = function (data) {\n        return JSON.parse(JSON.stringify(data));\n    };\n    BackendService.prototype.collectionHandler = function (reqInfo) {\n        // const req = reqInfo.req;\n        var resOptions;\n        switch (reqInfo.method) {\n            case 'get':\n                resOptions = this.get(reqInfo);\n                break;\n            case 'post':\n                resOptions = this.post(reqInfo);\n                break;\n            case 'put':\n                resOptions = this.put(reqInfo);\n                break;\n            case 'delete':\n                resOptions = this.delete(reqInfo);\n                break;\n            default:\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n                break;\n        }\n        // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n        var interceptor = this.bind('responseInterceptor');\n        return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n    };\n    /**\n     * Commands reconfigure the in-memory web api service or extract information from it.\n     * Commands ignore the latency delay and respond ASAP.\n     *\n     * When the last segment of the `apiBase` path is \"commands\",\n     * the `collectionName` is the command.\n     *\n     * Example URLs:\n     *   commands/resetdb (POST) // Reset the \"database\" to its original state\n     *   commands/config (GET)   // Return this service's config object\n     *   commands/config (POST)  // Update the config (e.g. the delay)\n     *\n     * Usage:\n     *   http.post('commands/resetdb', undefined);\n     *   http.get('commands/config');\n     *   http.post('commands/config', '{\"delay\":1000}');\n     */\n    BackendService.prototype.commands = function (reqInfo) {\n        var _this = this;\n        var command = reqInfo.collectionName.toLowerCase();\n        var method = reqInfo.method;\n        var resOptions = {\n            url: reqInfo.url\n        };\n        switch (command) {\n            case 'resetdb':\n                resOptions.status = STATUS.NO_CONTENT;\n                return this.resetDb(reqInfo).pipe(concatMap(function () { return _this.createResponse$(function () { return resOptions; }, false /* no latency delay */); }));\n            case 'config':\n                if (method === 'get') {\n                    resOptions.status = STATUS.OK;\n                    resOptions.body = this.clone(this.config);\n                    // any other HTTP method is assumed to be a config update\n                }\n                else {\n                    var body = this.getJsonBody(reqInfo.req);\n                    Object.assign(this.config, body);\n                    this.passThruBackend = undefined; // re-create when needed\n                    resOptions.status = STATUS.NO_CONTENT;\n                }\n                break;\n            default:\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\n        }\n        return this.createResponse$(function () { return resOptions; }, false /* no latency delay */);\n    };\n    BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\n        return {\n            body: { error: \"\" + message },\n            url: url,\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n            status: status\n        };\n    };\n    /**\n     * Create a cold response Observable from a factory for ResponseOptions\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n     * @param withDelay - if true (default), add simulated latency delay from configuration\n     */\n    BackendService.prototype.createResponse$ = function (resOptionsFactory, withDelay) {\n        if (withDelay === void 0) { withDelay = true; }\n        var resOptions$ = this.createResponseOptions$(resOptionsFactory);\n        var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n        return withDelay ? this.addDelay(resp$) : resp$;\n    };\n    /**\n     * Create a cold Observable of ResponseOptions.\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n     */\n    BackendService.prototype.createResponseOptions$ = function (resOptionsFactory) {\n        var _this = this;\n        return new Observable(function (responseObserver) {\n            var resOptions;\n            try {\n                resOptions = resOptionsFactory();\n            }\n            catch (error) {\n                var err = error.message || error;\n                resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n            }\n            var status = resOptions.status;\n            try {\n                resOptions.statusText = getStatusText(status);\n            }\n            catch (e) { /* ignore failure */ }\n            if (isSuccess(status)) {\n                responseObserver.next(resOptions);\n                responseObserver.complete();\n            }\n            else {\n                responseObserver.error(resOptions);\n            }\n            return function () { }; // unsubscribe function\n        });\n    };\n    BackendService.prototype.delete = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, url = _a.url;\n        // tslint:disable-next-line:triple-equals\n        if (id == undefined) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\n        }\n        var exists = this.removeById(collection, id);\n        return {\n            headers: headers,\n            status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n        };\n    };\n    /**\n     * Find first instance of item in collection by `item.id`\n     * @param collection\n     * @param id\n     */\n    BackendService.prototype.findById = function (collection, id) {\n        return collection.find(function (item) { return item.id === id; });\n    };\n    /**\n     * Generate the next available id for item in this collection\n     * Use method from `inMemDbService` if it exists and returns a value,\n     * else delegates to `genIdDefault`.\n     * @param collection - collection of items with `id` key property\n     */\n    BackendService.prototype.genId = function (collection, collectionName) {\n        var genId = this.bind('genId');\n        if (genId) {\n            var id = genId(collection, collectionName);\n            // tslint:disable-next-line:triple-equals\n            if (id != undefined) {\n                return id;\n            }\n        }\n        return this.genIdDefault(collection, collectionName);\n    };\n    /**\n     * Default generator of the next available id for item in this collection\n     * This default implementation works only for numeric ids.\n     * @param collection - collection of items with `id` key property\n     * @param collectionName - name of the collection\n     */\n    BackendService.prototype.genIdDefault = function (collection, collectionName) {\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\n            throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\n        }\n        var maxId = 0;\n        collection.reduce(function (prev, item) {\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n        }, undefined);\n        return maxId + 1;\n    };\n    BackendService.prototype.get = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, query = _a.query, url = _a.url;\n        var data = collection;\n        // tslint:disable-next-line:triple-equals\n        if (id != undefined && id !== '') {\n            data = this.findById(collection, id);\n        }\n        else if (query) {\n            data = this.applyQuery(collection, query);\n        }\n        if (!data) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\n        }\n        return {\n            body: this.bodify(this.clone(data)),\n            headers: headers,\n            status: STATUS.OK\n        };\n    };\n    /**\n     * Get location info from a url, even on server where `document` is not defined\n     */\n    BackendService.prototype.getLocation = function (url) {\n        if (!url.startsWith('http')) {\n            // get the document iff running in browser\n            var doc = (typeof document === 'undefined') ? undefined : document;\n            // add host info to url before parsing.  Use a fake host when not in browser.\n            var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n            url = url.startsWith('/') ? base + url : base + '/' + url;\n        }\n        return parseUri(url);\n    };\n    ;\n    /**\n     * get or create the function that passes unhandled requests\n     * through to the \"real\" backend.\n     */\n    BackendService.prototype.getPassThruBackend = function () {\n        return this.passThruBackend ?\n            this.passThruBackend :\n            this.passThruBackend = this.createPassThruBackend();\n    };\n    /**\n     * Get utility methods from this service instance.\n     * Useful within an HTTP method override\n     */\n    BackendService.prototype.getRequestInfoUtils = function () {\n        var _this = this;\n        return {\n            createResponse$: this.createResponse$.bind(this),\n            findById: this.findById.bind(this),\n            isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n            getConfig: function () { return _this.config; },\n            getDb: function () { return _this.db; },\n            getJsonBody: this.getJsonBody.bind(this),\n            getLocation: this.getLocation.bind(this),\n            getPassThruBackend: this.getPassThruBackend.bind(this),\n            parseRequestUrl: this.parseRequestUrl.bind(this),\n        };\n    };\n    BackendService.prototype.indexOf = function (collection, id) {\n        return collection.findIndex(function (item) { return item.id === id; });\n    };\n    /** Parse the id as a number. Return original value if not a number. */\n    BackendService.prototype.parseId = function (collection, collectionName, id) {\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\n            // Can't confirm that `id` is a numeric type; don't parse as a number\n            // or else `'42'` -> `42` and _get by id_ fails.\n            return id;\n        }\n        var idNum = parseFloat(id);\n        return isNaN(idNum) ? id : idNum;\n    };\n    /**\n     * return true if can determine that the collection's `item.id` is a number\n     * This implementation can't tell if the collection is empty so it assumes NO\n     * */\n    BackendService.prototype.isCollectionIdNumeric = function (collection, collectionName) {\n        // collectionName not used now but override might maintain collection type information\n        // so that it could know the type of the `id` even when the collection is empty.\n        return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n    };\n    /**\n     * Parses the request URL into a `ParsedRequestUrl` object.\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n     *\n     * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n     *   When apiBase=undefined and url='http://localhost/api/collection/42'\n     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n     *   When apiBase='/' and url='http://localhost/collection'\n     *     {base: '/', collectionName: 'collection', id: undefined, ...}\n     *\n     * The actual api base segment values are ignored. Only the number of segments matters.\n     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n     *\n     * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n     */\n    BackendService.prototype.parseRequestUrl = function (url) {\n        try {\n            var loc = this.getLocation(url);\n            var drop = this.config.rootPath.length;\n            var urlRoot = '';\n            if (loc.host !== this.config.host) {\n                // url for a server on a different host!\n                // assume it's collection is actually here too.\n                drop = 1; // the leading slash\n                urlRoot = loc.protocol + '//' + loc.host + '/';\n            }\n            var path = loc.path.substring(drop);\n            var pathSegments = path.split('/');\n            var segmentIx = 0;\n            // apiBase: the front part of the path devoted to getting to the api route\n            // Assumes first path segment if no config.apiBase\n            // else ignores as many path segments as are in config.apiBase\n            // Does NOT care what the api base chars actually are.\n            var apiBase = void 0;\n            // tslint:disable-next-line:triple-equals\n            if (this.config.apiBase == undefined) {\n                apiBase = pathSegments[segmentIx++];\n            }\n            else {\n                apiBase = removeTrailingSlash(this.config.apiBase.trim());\n                if (apiBase) {\n                    segmentIx = apiBase.split('/').length;\n                }\n                else {\n                    segmentIx = 0; // no api base at all; unwise but allowed.\n                }\n            }\n            apiBase += '/';\n            var collectionName = pathSegments[segmentIx++];\n            // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n            collectionName = collectionName && collectionName.split('.')[0];\n            var id = pathSegments[segmentIx++];\n            var query = this.createQueryMap(loc.query);\n            var resourceUrl = urlRoot + apiBase + collectionName + '/';\n            return { apiBase: apiBase, collectionName: collectionName, id: id, query: query, resourceUrl: resourceUrl };\n        }\n        catch (err) {\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\n            throw new Error(msg);\n        }\n    };\n    // Create entity\n    // Can update an existing entity too if post409 is false.\n    BackendService.prototype.post = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl, url = _a.url;\n        var item = this.clone(this.getJsonBody(req));\n        // tslint:disable-next-line:triple-equals\n        if (item.id == undefined) {\n            try {\n                item.id = id || this.genId(collection, collectionName);\n            }\n            catch (err) {\n                var emsg = err.message || '';\n                if (/id type is non-numeric/.test(emsg)) {\n                    return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n                }\n                else {\n                    console.error(err);\n                    return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\n                }\n            }\n        }\n        if (id && id !== item.id) {\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\n        }\n        else {\n            id = item.id;\n        }\n        var existingIx = this.indexOf(collection, id);\n        var body = this.bodify(item);\n        if (existingIx === -1) {\n            collection.push(item);\n            headers.set('Location', resourceUrl + '/' + id);\n            return { headers: headers, body: body, status: STATUS.CREATED };\n        }\n        else if (this.config.post409) {\n            return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\n        }\n        else {\n            collection[existingIx] = item;\n            return this.config.post204 ?\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\n        }\n    };\n    // Update existing entity\n    // Can create an entity too if put404 is false.\n    BackendService.prototype.put = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, url = _a.url;\n        var item = this.clone(this.getJsonBody(req));\n        // tslint:disable-next-line:triple-equals\n        if (item.id == undefined) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\n        }\n        if (id && id !== item.id) {\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\n        }\n        else {\n            id = item.id;\n        }\n        var existingIx = this.indexOf(collection, id);\n        var body = this.bodify(item);\n        if (existingIx > -1) {\n            collection[existingIx] = item;\n            return this.config.put204 ?\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\n        }\n        else if (this.config.put404) {\n            // item to update not found; use POST to create new item for this id.\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\n        }\n        else {\n            // create new item for id not found\n            collection.push(item);\n            return { headers: headers, body: body, status: STATUS.CREATED };\n        }\n    };\n    BackendService.prototype.removeById = function (collection, id) {\n        var ix = this.indexOf(collection, id);\n        if (ix > -1) {\n            collection.splice(ix, 1);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Tell your in-mem \"database\" to reset.\n     * returns Observable of the database because resetting it could be async\n     */\n    BackendService.prototype.resetDb = function (reqInfo) {\n        var _this = this;\n        this.dbReadySubject.next(false);\n        var db = this.inMemDbService.createDb(reqInfo);\n        var db$ = db instanceof Observable ? db :\n            typeof db.then === 'function' ? from(db) :\n                of(db);\n        db$.pipe(first()).subscribe(function (d) {\n            _this.db = d;\n            _this.dbReadySubject.next(true);\n        });\n        return this.dbReady;\n    };\n    return BackendService;\n}());\nexport { BackendService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}